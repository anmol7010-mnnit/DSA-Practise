vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	    int n = grid.size();
	    int m = grid[0].size();
	    
	    vector <vector <int>> ans(n, vector <int> (m,0));
	    vector <vector <int>> vis(n,vector<int> (m,0));
	    
	    queue <pair<int,pair<int,int>>> q;
	    
	    for (int i = 0; i < n; i++) {
	        for (int j = 0; j < m; j++) {
	            if (grid[i][j] == 1) {
	                q.push({0,{i,j}});
	            }
	        }
	    }
	    
	    while (!q.empty()) {
	        
	        int r = q.front().second.first;
	        int c = q.front().second.second;
	        int d = q.front().first;
	        
	        q.pop();
	        
	        ans[r][c] = d;
	        
	        int delr[] = {-1,0,+1,0};
            int delc[] = {0,+1,0,-1};
            
            for (int i = 0; i < 4; i++) {
                int nrow = r + delr[i];
                int nCol = c + delc[i];
                
                if (nrow >= 0 && nCol >= 0 && nrow < n && nCol < m && grid[nrow][nCol] == 0 
                && !vis[nrow][nCol]) {
                    
                    q.push( {d+1,{nrow,nCol}} );
                    vis[nrow][nCol] = 1;
                    
                }
            } 
	    }
	    
	    return ans;
	}
