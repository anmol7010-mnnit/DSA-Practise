
#include <bits/stdc++.h> 

class Node {

    public:
    Node* links[26];
    int cntEndWith;
    int cntPrefix;  

    Node () {
        cntEndWith = 0;
        cntPrefix = 0;
        for (int i = 0; i < 26; i++) {
            links[i] = NULL;
        }
    }

    bool containsKey(char ch) {
        return (links[ch-'a'] != NULL);
    }

    Node* get(char ch) {
        return links[ch-'a'];
    }

    void put(char ch, Node* node) {
        links[ch-'a'] = node;
    }

    void increaseEnd() {
        cntEndWith++;
    }

    void increasePrefix() {
        cntPrefix++;
    }

    void deleteEnd() {
        cntEndWith--;
    }

    void reducePrefix() {
        cntPrefix--;
    }

    int getEnd() {
        return cntEndWith;
    }

    int getPrefix() {
        return cntPrefix;
    }

};

class Trie{
    private:Node* root;

    public:

    Trie(){
        root = new Node();
    }

    void insert(string &word){
        
        Node* node = root;

        for (int i = 0; i < word.length(); i++) {
            if (!node->containsKey(word[i])) {
                node->put(word[i],new Node());
            }
            node = node->get(word[i]);
            node->increasePrefix();
        }
        node->increaseEnd();

    }

    int countWordsEqualTo(string &word){

        Node* node = root;

        for (int i = 0; i < word.length(); i++) {
            if (node->containsKey(word[i])) {
                node = node->get(word[i]);
            }
            else {
                return 0;
            }
        }
        return node->getEnd();

    }

    int countWordsStartingWith(string &word){
        
        Node* node = root;

        for (int i = 0; i < word.length(); i++) {
            if (node->containsKey(word[i])) {
                node = node->get(word[i]);
            }
            else {
                return 0;
            }
        }
        
        return node->getPrefix();

    }

    void erase(string &word) {
        Node* node = root;

        for (int i = 0; i < word.length(); i++) {
            if (node->containsKey(word[i])) {
                node->reducePrefix();
                node = node->get(word[i]);
            }
            else {
                return;
            }
        }
        node -> deleteEnd();
    }
};
