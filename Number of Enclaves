//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    int numberOfEnclaves(vector<vector<int>> &grid) {
       
        queue <pair<int,int>> q;
        
        int n = grid.size();
        int m = grid[0].size();
        
        int vis[n][m] = {0};
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                
                if (i == 0 || j == 0 || i == n-1 || j == m-1) {
                    if (grid[i][j] == 1) {
                        q.push({i,j});
                        vis[i][j] = 1;
                    }
                }
            }
        }
        
        while(!q.empty()) {
            pair<int,int> top = q.front();
            int row = top.first;
            int Col = top.second;
            
            int delrow[] = {-1,0,+1,0};
            int delCol[] = {0,+1,0,-1};
            
            
            for (int i = 0; i < 4; i++) {
                int nrow = row + delrow[i];
                int nCol = Col + delCol[i];
                
                if (vis[nrow][nCol] == 0 && grid[nrow][nCol] == 1 
                && nrow >= 0 && nrow < n && nCol >= 0 && nCol > m) {
                    q.push({nrow,nCol});
                    vis[nrow][nCol] = 1;
                }
            }
        }
        
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1 && vis[i][j] == 0) {
                    cnt++;
                }
            }
        }
        
        return cnt;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> grid(n, vector<int>(m));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        cout << obj.numberOfEnclaves(grid) << endl;
    }
}
// } Driver Code Ends
