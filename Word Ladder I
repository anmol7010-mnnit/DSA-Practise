int wordLadderLength(string startWord, string targetWord, vector<string>& wordList) {
        
        queue<pair<string, int>> q;
        
        unordered_set<string> map(wordList.begin(), wordList.end());
        
        q.push({startWord,1} );
        
        map.erase(startWord);

        while(!q.empty()) {
            pair <string,int> p = q.front();
            string word = p.first;
            int steps = p.second;
            q.pop();

            if (word == targetWord) {
                return steps;
            }

            for (int i = 0; i < word.size(); i++) {
                char original = word[i];
                for (char ch = 'a'; ch <= 'z'; ch++) {
                    word[i] = ch;
                    if (map.find(word) != map.end()) {
                        map.erase(word);
                        q.push({word, steps+1});
                    }
                }
                word[i] = original;
            }
        }

        return 0;
    }
