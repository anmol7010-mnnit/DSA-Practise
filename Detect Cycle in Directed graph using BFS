class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        
        int indegree[V] = {0};
        
        for (int i = 0; i < V; i++) {
            for (auto it:adj[i]) {
                indegree[it]++;
            }
        }
        
        vector <int> ans;
        
        queue <int> q;
        
        for (int i = 0; i < V; i++) {
            if (indegree[i] == 0) {
                q.push(i);
            }
        }
            
        while (!q.empty()) {
            int top = q.front();
            q.pop();
            
            ans.push_back(top);
            
            for (auto i:adj[top]) {
                indegree[i]--;
                if (indegree[i] == 0) {
                    q.push(i);
                }
            }
        }
        
        if (ans.size() == V) {
            return 0;
        } 
        
        return 1;
         
    }
};
