class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool bfs(int node, int V, vector <int> adj[], int vis[]) {
        
        queue <pair<int,int>> q;
        
        q.push({node,-1});
        vis[node] = 1;
        
        while(!q.empty()) {
            pair<int,int> top = q.front();
            int node = top.first;
            int parent = top.second;
            q.pop();
            
            for (auto i:adj[node]) {
                if (!vis[i]) {
                    q.push({i,node});
                    vis[i] = 1;
                }
                else if (i != parent) {
                    return true;
                }
            }
        }
        
        return false;
    }
    
    bool isCycle(int V, vector<int> adj[]) {
        
        int vis[V] = {0};
        
        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                if (bfs(i,V,adj,vis))
                    return true;
            }    
        }
        
        return false;
        
    }
};
