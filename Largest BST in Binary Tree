/* Tree node structure  used in the program

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};*/

class info {
    public:
        int maxi;
        int mini;
        bool isBST;
        int size;
};

info solve(Node* root, int &ans) {
    if (root == NULL)
        return {INT_MIN,INT_MAX,true,0};
        
    info left = solve(root -> left,ans);
    info right = solve(root -> right,ans);
    
    info currnode;
    
    currnode.size = left.size+right.size+1;
    currnode.maxi = max(root -> data, right.maxi);
    currnode.mini = min(root -> data, left.mini);
    
    if (left.isBST && right.isBST && root -> data > left.maxi && root -> data < right.mini) {
        currnode.isBST = true;
    }
    else {
        currnode.isBST = false;
    }
    
    if (currnode.isBST) {
        ans = max(ans,currnode.size);
    }
    
    return currnode;
}

class Solution {
    public:
    /*You are required to complete this method */
    // Return the size of the largest sub-tree which is also a BST
    int largestBst(Node *root)
    {
        int maxSize = 0;
        solve(root,maxSize);
        return maxSize;
    }
};
