class Solution {
public:
// int solve(int ind, int buy, vector<int>& prices, vector<vector<int>> &dp) {
//         if (ind >= prices.size()) {
//             return 0;
//         }

//         if (dp[ind][buy] != -1) {
//             return dp[ind][buy];
//         }

//         if (buy) {
//             return dp[ind][buy] = max((-prices[ind] + solve(ind+1,0,prices,dp)), (0 + solve(ind+1,1,prices,dp)));
//         }
//         else {
//             return dp[ind][buy] = max((prices[ind] + solve(ind+2,1,prices,dp)), (0 + solve(ind+1,0,prices,dp)));
//         }
//     }

    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector <int> ahead(n+2, 0), aahead(n+2,0);
        vector <int> cur(n+2, 0);
        // return solve(0,1,prices,dp);

        for (int ind = n-1; ind >= 0; ind--) {
            for (int buy = 0; buy <= 1; buy++) {
                if (buy) {
                    cur[buy] = max((-prices[ind] + ahead[0]), (0 + ahead[1]));
                }
                else {
                    cur[buy] = max((prices[ind] + aahead[1]), (0 + ahead[0]));
                }
            }
            aahead = ahead;
            ahead = cur;
        }
        return cur[1];
    }
};
