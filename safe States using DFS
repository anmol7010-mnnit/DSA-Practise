// User function Template for C++

class Solution {
  public:
    bool dfs(int node, int vis[], vector <int> adj[], int check[], int path[]) {
        vis [node] = 1;
        path[node] = 1;
        
        for (auto i:adj[node]) {
            if (!vis[i]) {
                if (dfs(i,vis,adj,check,path)) {
                    return true;
                }
            }
            else if (path[i] == 1) {
                return true;
            }
        }
        
        check[node] = 1;
        path[node] = 0;
        return false;
    }
  
    vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        
        int vis[V] = {0};
        int path[V] = {0};
        
        int check[V] = {0};
        
        vector <int> ans;
        
        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                dfs(i,vis,adj,check,path);
            }
        }
        
        for (int i = 0; i <V; i++) {
            if (check[i] == 1) {
                ans.push_back(i);
            }
        }
        
        sort(ans.begin(),ans.end());
        return ans;
    }
};
