// User function Template for C++

class DisjointSet {
    
    vector <int> rank,parent,size;
    
    public:
    
        DisjointSet(int n) {
            
            rank.resize(n+1,0);
            parent.resize(n+1);
            size.resize(n+1);
            
            for (int i = 0; i <= n; i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }
            
        int findUPar(int node) {
            if (node == parent[node]) {
                return node;
            }
            return parent[node] = findUPar(parent[node]);
        }
            
        void unionByRank(int u, int v) {
            int ulp_u = findUPar(u);
            int ulp_v = findUPar(v);
            
            if (ulp_u == ulp_v) {
                return;
            }
            
            if (rank[ulp_u] < rank[ulp_v]) {
                parent[ulp_u] = ulp_v;
            }
            else if (rank[ulp_v] < rank[ulp_u]) {
                parent[ulp_v] = ulp_u;
            }
            else {
                parent[ulp_v] = ulp_u;
                rank[ulp_u]++;   
            }
        }
        
        void unionBySize(int u, int v) {
            int ulp_u = findUPar(u);
            int ulp_v = findUPar(v);
            
            if (ulp_u == ulp_v) {
                return;
            }
            
            if (size[ulp_u] < size[ulp_v]) {
                parent[ulp_u] = ulp_v;
                size[ulp_u] += ulp_v;
            }
            else {
                parent[ulp_v] = ulp_u;
                size[ulp_u] += size[ulp_v];   
            }
        }
};

class Solution {
  public:
    vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators) {
        
        DisjointSet ds(n*m);
        
        int vis[n][m] = {0};
        
        memset(vis,0, sizeof vis);
        
        int cnt = 0;
        
        vector <int> ans;
        
        for (auto i:operators) {
            int row = i[0];
            int col = i[1];
            
            if (vis[row][col] == 1) {
                ans.push_back(cnt);
                continue;
            }
            vis[row][col] = 1;
            cnt++;
            
            
            int dr[] = {-1,0,1,0};
            int dc[] = {0,-1,0,1};
            
            for (int i = 0; i < 4; i++) {
                int adjr = dr[i] + row;
                int adjc = dc[i] + col;
                
                if (adjr >= 0 && adjc >= 0 && adjr < n && adjc < m && vis[adjr][adjc] == 1) {
                    int node = row*m + col;
                    int adjNodeNo = adjr*m + adjc;
                    
                    if (ds.findUPar(node) != ds.findUPar(adjNodeNo)) {
                        cnt--;
                        ds.unionBySize(node,adjNodeNo);
                    }
                }
            }
            ans.push_back(cnt);
        }
        
        return ans;
        
    }
};
