/*************************************************************
    Following is the Binary Serach Tree node structure

    template <typename T>
    class TreeNode
    {
    public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };

*************************************************************/
void inorder(TreeNode<int>* root, vector <int>& ans) {
    if (root == NULL)
        return;
    
    inorder(root -> left, ans);
    ans.push_back(root -> data);
    inorder(root -> right,ans);
}

TreeNode<int>* solve(vector <int>&ans, int s, int e) {
    if (s > e) 
        return NULL;

    int mid = s+(e-s)/2;

    TreeNode<int>* root = new TreeNode<int>(ans[mid]);
    root -> left = solve(ans,s,mid-1);
    root -> right = solve(ans,mid+1,e);

    return root;
}

TreeNode<int>* balancedBst(TreeNode<int>* root) {
    vector <int> ans;
    inorder(root,ans);

    return solve(ans,0,ans.size()-1);
}
